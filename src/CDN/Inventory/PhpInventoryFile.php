<?
	namespace CDN\Inventory;

	class PhpInventoryFile extends AbstractFileInventory {

		protected $file = null;

		public function __construct($file) {
			$this->file = $file;
		}

		/**
		 * Writes the data to file
		 * @param array $inventoryData The inventory data
		 * @throws \Exception
		 */
		protected function write(array $inventoryData) {
			$lines = [];

			$lines[] = '<?php ';
			$lines[] = '';
			$lines[] = '// ' . basename($this->file) . ' @generated by ITS-Mieger/CDN';
			$lines[] = '';
			$lines[] = 'return array(' . $this->serializeArrayElements($inventoryData);
			$lines[] = ');';
			$lines[] = '';

			if (!file_put_contents($this->file, implode(PHP_EOL, $lines)))
				throw new \Exception('Could not write CDN inventory to "' . $this->file . '"');
		}

		/**
		 * Reads the inventory data from file
		 * @return array The inventory data. Empty array if not existing
		 */
		protected function read() {
			if (file_exists($this->file))
				$inventoryData = require $this->file;
			else
				$inventoryData = [];

			return $inventoryData;
		}


		protected function serializeArrayElements($array, $indent = "\t") {
			$ret = '';

			foreach($array as $key => $value) {
				$ret .= PHP_EOL . $indent . $this->toStringLiteral($key) . ' => ';

				if (!is_array($value)) {
					$ret .= $this->toStringLiteral($value);
				}
				else {
					$ret .= 'array(';
					$ret .= $this->serializeArrayElements($value, $indent . "\t");
					$ret .= PHP_EOL . $indent . ')';
				}

				$ret .= ',';
			}

			return $ret;
		}

		protected function toStringLiteral($value) {
			$value = str_replace('\\', '\\\\', $value);
			$value = str_replace('\'', '\\\'', $value);

			return "'" . $value . "'";
		}

	}