<?
	namespace CDN\Script;

	use CDN\Config\CdnConfig;
	use CDN\Inventory\PhpInventoryFile;
	use CDN\Sync\CdnSync;
	use CDN\Sync\ICdnAdapter;
	use CDN\Util\Path;

	class SyncScript
	{
		const CDN_SCRIPT_FILE_NAME = 'cdn.php';
		const CDN_INVENTORY_FILE_NAME = 'cdn_inventory.php';

		public static function run($configFile = null) {

			$cdnConfig = new CdnConfig($configFile);


			$rootDir = $cdnConfig->getRootDir();
			$vendorDir = $cdnConfig->getVendorDir();
			$inventoryDir = $cdnConfig->getInventoryDir();

			// create inventory directory if not existing
			if (!file_exists($inventoryDir)) {
				if (!@mkdir($inventoryDir, 0755, true))
					throw new \Exception('Could not create inventory directory "' . $inventoryDir . '"');
			}

			$inventoryFile = $inventoryDir . Path::DS . self::CDN_INVENTORY_FILE_NAME;
			$inventoryFileRel = Path::relativePathTo($inventoryFile, $vendorDir);

			// write cdn.php
			self::writeCdnScript($inventoryFileRel, $vendorDir);

			// create inventory file
			$inv = (new PhpInventoryFile($inventoryFile))
				->clear($cdnConfig->getRootDirRelative());

			// get paths
			$paths = $cdnConfig->getPaths();
			if (empty($paths))
				throw new \Exception('No CDN paths configured');

			// publish paths
			$sync = new CdnSync($inv, $rootDir);
			foreach($paths as $directory => $config) {

				if (!is_array($config))
					$config = [];

				if (Path::isRelative($directory) && empty($config['target-dir']))
					$config['target-dir'] = $directory;


				$absDirectory = Path::absolutePath($directory, $rootDir);

				$sync->publish([$directory => $absDirectory], self::getAdapterFromConfig($config, $cdnConfig));
			}

		}

		/**
		 * @param $configData
		 * @param CdnConfig $cdnConfig
		 * @return ICdnAdapter
		 * @throws \Exception
		 */
		protected static function getAdapterFromConfig(array $configData, CdnConfig $cdnConfig) {

			$adpConfig = self::mergeConfig($cdnConfig->getDefaultAdapterConfig(), $configData);

			$adapterKey = (!empty($adpConfig['adapter']) ? $adpConfig['adapter'] : 'S3');

			$adapters = $cdnConfig->getAdapters();

			if (empty($adapters[$adapterKey]))
				throw new \Exception('No adapter "' . $adapterKey . '" defined');

			$adapterClass = $adapters[$adapterKey];
			if (!class_exists($adapterClass))
				throw new \Exception('Adapter class "' . $adapterClass . '" not found');

			$adapter = forward_static_call([$adapterClass, 'fromConfig'], $adpConfig);

			return $adapter;
		}

		protected static function writeCdnScript($inventoryFile, $vendorDir) {

			$lines = [];

			$lines[] = '<?php';
			$lines[] = '';
			$lines[] = '// ' . self::CDN_SCRIPT_FILE_NAME . ' @generated by ITS-Mieger/CDN';
			$lines[] = '';
			$lines[] = '\CDN\CDN::loadInventory(new \CDN\Inventory\PhpInventoryFile(__DIR__ . ' . self::toStringLiteral(Path::DS . $inventoryFile) . '));';
			$lines[] = '';

			if (!file_put_contents($vendorDir . Path::DS . self::CDN_SCRIPT_FILE_NAME, implode(PHP_EOL, $lines)))
				throw new \Exception('Could not write CDN inventory to "' . $vendorDir . Path::DS . self::CDN_SCRIPT_FILE_NAME . '"');
		}

		protected static function toStringLiteral($value) {
			$value = str_replace('\\', '\\\\', $value);
			$value = str_replace('\'', '\\\'', $value);

			return "'" . $value . "'";
		}

		protected static function isAssoc($arr) {
			return array_keys($arr) !== range(0, count($arr) - 1);
		}

		protected static function mergeConfig($config, $config2) {

			foreach ($config2 as $key => $value) {
				if (is_array($value) && self::isAssoc($value) && array_key_exists($key, $config))
					$value = self::mergeConfig($config[$key], $value);

				$config[$key] = $value;
			}

			return $config;
		}
	}